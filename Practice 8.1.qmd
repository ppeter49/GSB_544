---
title: "Practice 8.1"
format: html
editor: visual
author: Parker Petersen
self-contained: True
---

```{python}
import pandas as pd
import numpy as np
from plotnine import *
from sklearn.metrics import mean_squared_error
from sklearn.pipeline import Pipeline
from sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler, OneHotEncoder, PolynomialFeatures
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
```

```{python}
!pip install palmerpenguins
from palmerpenguins import load_penguins
penguins = load_penguins()
penguins = penguins.dropna()
```

```{python}
penguins.info()
```

```{python}
#Linear Regression
X = penguins.drop(["bill_depth_mm", "year"], axis=1)
y = penguins["bill_depth_mm"]
X_train, X_test, y_train, y_test = train_test_split(X, y)

enc = OneHotEncoder(sparse_output=False)
lr = LinearRegression()

ct = ColumnTransformer(
    transformers=[
        ("dummify", enc, ["species", "island", "sex"]),
        ("standardize", StandardScaler(), ["bill_length_mm", "flipper_length_mm", "body_mass_g"])
    ]
)

lr_pipeline = Pipeline(
    [("preprocess", ct),
     ("lr", lr)]
)

lr_pipeline_fitted = lr_pipeline.fit(X_train, y_train)
y_preds = lr_pipeline_fitted.predict(X_test)
mse_lr = mean_squared_error(y_test, y_preds)
print(mse_lr)

y_preds_lr_train = lr_pipeline_fitted.predict(X_train)
mse_train_lr = mean_squared_error(y_train, y_preds_lr_train)
```

```{python}
#kNN with k=10
knn = KNeighborsRegressor(n_neighbors=10)
lr_pipeline_knn1 = Pipeline(
    [("preprocess", ct),
     ("knn", knn)]
)
lr_pipeline_knn_fitted1 = lr_pipeline_knn1.fit(X_train, y_train)
y_preds_knn = lr_pipeline_knn_fitted1.predict(X_test)
mse_knn = mean_squared_error(y_test, y_preds_knn)
print(mse_knn)

lr_pipeline_knn10_fitted = lr_pipeline_knn1.fit(X_train, y_train)
y_preds_knn10_train = lr_pipeline_knn10_fitted.predict(X_train)
mse_train_knn10 = mean_squared_error(y_train, y_preds_knn10_train)
```

```{python}
#kNN w/ k=50
knn = KNeighborsRegressor(n_neighbors=50)
lr_pipeline_knn2 = Pipeline(
    [("preprocess", ct),
     ("knn", knn)]
)
lr_pipeline_knn_fitted2 = lr_pipeline_knn2.fit(X_train, y_train)
y_preds_knn = lr_pipeline_knn_fitted2.predict(X_test)
mse_knn2 = mean_squared_error(y_test, y_preds_knn)
print(mse_knn2)

lr_pipeline_knn50_fitted = lr_pipeline_knn2.fit(X_train, y_train)
y_preds_knn50_train = lr_pipeline_knn50_fitted.predict(X_train)
mse_train_knn50 = mean_squared_error(y_train, y_preds_knn50_train)
```

```{python}
#Decision Tree
dt = DecisionTreeRegressor(random_state=50)
lr_pipeline_dt = Pipeline(
    [("preprocess", ct),
     ("decision_tree", dt)]
)

lr_pipeline_dt_fitted = lr_pipeline_dt.fit(X_train, y_train)
y_preds_dt = lr_pipeline_dt_fitted.predict(X_test)
mse_dt = mean_squared_error(y_test, y_preds_dt)
print(mse_dt)

lr_pipeline_dt_fitted = lr_pipeline_dt.fit(X_train, y_train)
y_preds_dt_train = lr_pipeline_dt_fitted.predict(X_train)
mse_train_dt = mean_squared_error(y_train, y_preds_dt_train)
```

```{python}
mse_values = [mse_lr, mse_knn, mse_knn2, mse_dt]
model_names = ['Linear Regression', 'KNN (k=10)', 'KNN (k=50)', 'Decision Tree']
flexibility_values = [len(lr_pipeline.named_steps['preprocess'].transformers_[0][1].get_feature_names_out()),
                      len(lr_pipeline_knn1.named_steps['preprocess'].transformers_[0][1].get_feature_names_out()),
                      len(lr_pipeline_knn2.named_steps['preprocess'].transformers_[0][1].get_feature_names_out()),
                      len(lr_pipeline_dt.named_steps['preprocess'].transformers_[0][1].get_feature_names_out())]

mse_df = pd.DataFrame({'Model': model_names, 'Flexibility': flexibility_values, 'MSE': mse_values, 'Dataset': ['Test'] * 4})

mse_df_train = mse_df.copy()
mse_df_train['MSE'] = [mse_train_lr, mse_train_knn10, mse_train_knn50, mse_train_dt]
mse_df_train['Dataset'] = 'Train'
mse_df = pd.concat([mse_df, mse_df_train], ignore_index=True)

(ggplot(mse_df, aes(x='Flexibility', y='MSE', color='Dataset'))
 + geom_point(shape='s', size=3)
 + geom_line(aes(group='Model'), size=1)
 + theme_minimal()
).draw()


```
