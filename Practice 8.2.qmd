---
title: "Practice 8.2"
format: html
editor: visual
author: Parker Petersen
self-contained: True
---

```{python}
import pandas as pd
import numpy as np
from sklearn.metrics import mean_squared_error
from sklearn.pipeline import Pipeline
from sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler, OneHotEncoder, PolynomialFeatures, label_binarize
from sklearn.compose import make_column_selector, ColumnTransformer
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, roc_auc_score, f1_score, roc_curve, auc
from plotnine import *
```

```{python}
!pip install palmerpenguins
from palmerpenguins import load_penguins
penguins = load_penguins()
penguins = penguins.dropna()
```
```{python}
penguins.info()
```

```{python}
X = penguins.drop(["species"], axis = 1)
y = penguins["species"]
X_train, X_test, y_train, y_test = train_test_split(X, y)
enc = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
knn10 = KNeighborsRegressor(n_neighbors=10)

ct = ColumnTransformer(
    transformers=[
        ("dummify", enc, make_column_selector(dtype_include=object)),
        ("standardize", StandardScaler(), make_column_selector(dtype_include=np.number))
    ],
    remainder='passthrough'
)
```

```{python}
#kNN Model 1

knn10 = KNeighborsClassifier(n_neighbors=10)
knn_pipeline = Pipeline([
    ("preprocess", ct),
    ("knn", knn10)
])

fitted_pipeline = knn_pipeline.fit(X_train, y_train)

pred = fitted_pipeline.predict(X_test)


accuracy = accuracy_score(y_true=y_test, y_pred=pred)
precision = precision_score(y_true=y_test, y_pred=pred, average=None)
recall = recall_score(y_true=y_test, y_pred=pred, average=None)
roc_auc = roc_auc_score(y_score=fitted_pipeline.predict_proba(X_test), y_true=y_test, multi_class="ovr", average="macro")
f1 = f1_score(y_pred=pred, y_true=y_test, average=None)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("ROC AUC:", roc_auc)
print("F1 Score:", f1)

```

```{python}
#kNN Model 2
knn50 = KNeighborsClassifier(n_neighbors=50)
knn_pipeline = Pipeline([
    ("preprocess", ct),
    ("knn", knn50)
])

fitted_pipeline = knn_pipeline.fit(X_train, y_train)

pred = fitted_pipeline.predict(X_test)


accuracy = accuracy_score(y_true=y_test, y_pred=pred)
precision = precision_score(y_true=y_test, y_pred=pred, average=None)
recall = recall_score(y_true=y_test, y_pred=pred, average=None)
roc_auc = roc_auc_score(y_score=fitted_pipeline.predict_proba(X_test), y_true=y_test, multi_class="ovr", average="macro")
f1 = f1_score(y_pred=pred, y_true=y_test, average=None)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("ROC AUC:", roc_auc)
print("F1 Score:", f1)

```

```{python}
#Decision Tree 1
dt_classifier = DecisionTreeClassifier(max_depth=5, random_state=50)
lr_pipeline_dt_classifier = Pipeline([
    ("preprocess", ct),
    ("decision_tree", dt_classifier)
])

fitted_pipeline_classifier = lr_pipeline_dt_classifier.fit(X_train, y_train)

pred_classifier = fitted_pipeline_classifier.predict(X_test)

accuracy = accuracy_score(y_true=y_test, y_pred=pred_classifier)
precision = precision_score(y_true=y_test, y_pred=pred_classifier, average=None)
recall = recall_score(y_true=y_test, y_pred=pred_classifier, average=None)
roc_auc = roc_auc_score(y_score=fitted_pipeline_classifier.predict_proba(X_test), y_true=y_test, multi_class="ovr", average="macro")
f1 = f1_score(y_pred=pred_classifier, y_true=y_test, average=None)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("ROC AUC:", roc_auc)
print("F1 Score:", f1)
```

```{python}
#Decision Tree 2
dt_classifier = DecisionTreeClassifier(max_depth=20, random_state=50)
lr_pipeline_dt_classifier = Pipeline([
    ("preprocess", ct),
    ("decision_tree", dt_classifier)
])

fitted_pipeline_classifier = lr_pipeline_dt_classifier.fit(X_train, y_train)

pred_classifier = fitted_pipeline_classifier.predict(X_test)

accuracy = accuracy_score(y_true=y_test, y_pred=pred_classifier)
precision = precision_score(y_true=y_test, y_pred=pred_classifier, average=None)
recall = recall_score(y_true=y_test, y_pred=pred_classifier, average=None)
roc_auc = roc_auc_score(y_score=fitted_pipeline_classifier.predict_proba(X_test), y_true=y_test, multi_class="ovr", average="macro")
f1 = f1_score(y_pred=pred_classifier, y_true=y_test, average=None)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("ROC AUC:", roc_auc)
print("F1 Score:", f1)
```


```{python}
y_test_binary = label_binarize(y_test, classes=['Adelie', 'Chinstrap', 'Gentoo'])
y_score = fitted_pipeline_classifier.predict_proba(X_test)
fpr, tpr, _ = roc_curve(y_test_binary[:, 2], y_score[:, 2])
roc_auc = auc(fpr, tpr)

roc_df = pd.DataFrame({'False Positive Rate': fpr, 'True Positive Rate': tpr})
(ggplot(roc_df, aes(x='False Positive Rate', y='True Positive Rate')) +
 geom_line(color='darkorange', size=1.5) +
 geom_abline(intercept=0, slope=1, linetype='--', color='navy', size=1.5) +
 labs(title='ROC Curve for Gentoo Species', x='False Positive Rate', y='True Positive Rate')
)


```


























